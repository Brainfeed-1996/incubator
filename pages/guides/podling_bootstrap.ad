<section id='bootstrap'><title>[DRAFT] Podling Bootstrap</title>
<p>
<strong>NOTE</strong> This section is a DRAFT under development.
</p>
<p>
Following podling creation, it needs to be bootstrapped. Here are some of
the tasks:

- Ensure link:#mentors-ipmc[Mentors are on the IPMC][<code>Mentors</code>]
- Add podling to link:#Sending+in+an+Incubation+Report[reporting schedule] [<code>IPMC member</code>]
- link:#Initialize+Podling+Status+Page[Initialize project status page] [<code>IPMC member</code>]
- Start link:#orientation'>orientation</a> [<code><a href='#who-committers[Prospective committers]</code>]
- Start <code>CLA</code> and <code>CCLA</code> submission [<code>link:#who-committers[Prospective committers]</code>]
- Start link:#initial-ip-clearance[IP Clearance]
[<code>IPMC member</code>]
- Request Required Resources
** link:#request-mailing-lists'>Mailing Lists</a> [<a href='#who-infra[Infrastructure Team]]
** Consider and plan link:#transition-mailing-lists[transition to official mailing lists]

- link:#Set+Up+Repository[Subversion] [IPMC]
- link:#request-issue-tracking'>Issue Tracking</a> [<a href='#who-infra[Infrastructure Team]]
** Consider and plan link:#issue-tracking-transition[issue tracking transition]

- link:#create-website'>Create website</a> [<code><a href='#who-committers[Prospective committers]</code>]
** Consider and plan link:#web-site-transition[web site transition]

<section id='mentors-ipmc'><title>Mentors MUST be on the IPMC</title>
<p>
Mentors link:/incubation/Incubation_Policy.html#Mentor[MUST] be on the IPMC.
Any prospective Mentors who are not yet on the IPMC should ask to be added (by election).
Email the application to <code>private@incubator.apache.org</code>.
</p>
<note>
This process may take a few days.
</note>
</section>

<section id='submit-cla'><title>CLA and CCLA Submission</title>
<p>
Prospective committers need to submit a
Contributor License Agreement
(link:http://www.apache.org/licenses/#clas[CLA]).
This process can take a while so it is recommended that committers start to submit
these as soon as the podling is accepted.
</p>
</section>

<section id='initial-ip-clearance'><title>IP Clearance</title>
<section id='initial-up-clearance-general'><title>Background</title>
<p>
Existing codebases need to be imported through the standard IP clearance
process. This means that a Software Grant Agreement
(link:http://www.apache.org/licenses/#grants[SGA])
or Contributor License Agreement
(link:http://www.apache.org/licenses/#clas[CLA])
need to be submitted
for all copyright owners. This process may take a while so it is best to
start as soon as the podling is accepted.
</p>
<p>
The acceptance of the initial codebases is approved by the
IPMC as part of the acceptance motion. So, no vote is required by the
PPMC. Otherwise, follow the standard IP clearance
link:#poding-ip-clearance[process for podlings].
</p>
</section>
<section id='initial-provenance'><title>Establishing Provenance</title>
<p>
Paperwork needs to be submitted to Apache that grants a legal license on the code
to the Apache Software Foundation.
As a rule of thumb, if all the material contributors to the code
are joining the podling as initial contributors, then CLAs (individual or corporate)
are all you need. The individuals must submit the 'individual' CLA (ICLA).
If there are employers involved who might claim
rights in the code, then corporate CLAs (CCLAs) are needed for those employers.
</p><p>
If, on the other hand, there are material contributors who are <strong>
not</strong> joining the podling as initial contributors, or if there
are additional corporate entities who can claim rights in the code,
then SGAs are required from those individuals or corporations.
</p>
<p>
The foregoing is only a rule of thumb. Generally, the mentors of a new project
will need to consult with general@incubator.apache.org or the Apache legal team
about the particular circumstances.
</p>
<p>
It may take some time to track down all contributors. It is not necessary to
have paperwork on file for all contributions before the code is imported.
It may be necessary to reverse some patches and rewrite areas of code if
contributors cannot be found or at not happy about given Apache written
permission to use their code.
</p><p>
No releases are possible until the provenance of all the code to be release
has been clearly established and the relevant paperwork filed with Apache. It is
therefore important to keep the status updated.
</p><p>
Receipts of ICLAs, CCLAs, and SGAs are recorded by the secretary in
the private foundation repository. Reading is restricted to members and officers
of the foundation. If there is no officer or member available then ask on the
general list.
</p>
</section>
<section id='initial-import-code-dump'><title>Initial Code Dump</title>
<p>
For corporate contributions, the SGA or CCLA MUST be completed, submitted
and received before the code is imported.
</p><p>
For contributions composed of patches from individual contributors,
it is safe to import the code once the major contributors (by volume)
have completed ICLAs or SGAs.
</p><p>
In either case, the code to be imported should be attached to a JIRA
and then imported. It is recommended that the previous version
control system is tagged so that the imported version is precisely known.
</p><p>
A public record MUST be made of the code imported. If the import is not
attached to JIRA then it MUST be committed to version control.
</p>
<section id='svn-history'><title>Importing History</title>
<p>
The incoming code can either be committed as a snapshot or as a complete version
control export including history (provided that the import is available in a format
readable by subversion).
Importing with history allows existing open source projects who want to maintain
older versions at Apache to easily perform source diffs and so on. Import just the
latest code allows a clean break to be made with the past. The choice is left to
the community of the incoming project.
</p><p>
The infrastructure team will perform the import including
mapping IDs but it is an operation that requires skill, time and care. In this case,
please ask the infrastructure team politely.
</p>
</section>
</section>
<section id='crypto-audit'><title>Audit Cryptography</title>
<p>
Before the code base is committed into an Apache repository, the contribution
link:http://www.apache.org/dev/crypto.html[MUST] be checked
and any restricted cryptography reported appropriately. Read and follow
link:http://www.apache.org/dev/crypto.html[this guide].
</p>
</section>
<section id='initial-clean-up'>
<title>Initial Clean Up</title>
<p>
Once a JIRA has been created, the source should be cleaned up.
</p>
<p>
- Ensure source files use the standard Apache boilerplates.
This may mean replacing existing license headers. The
tools in
<code>
https://svn.apache.org/repos/private/committers/tools
</code>
and
<code>
https://svn.apache.org/repos/private/committers/relicense
</code>
may be useful.

- Ensure that NOTICE and LICENSE documents are present and
correct

- Add any required notices. Consider moving copyright
attributions from source documents to the NOTICE. Read
<a href='http://www.apache.org/legal/src-headers.html'>
Apache policy on headers
</a>
.

- Audit the source for any potential licensing issues. Any
which are found should either resolved immediately (when
required) or noted in the status document for later.

It is recommended that the initial clean up be is started
before the code is committed. It MUST be completed before any
releases are cut.
</p>
<section id='clean-up-best-practice'>
<title>Clean Up Best Practice</title>
<p>
It is recommended that version control is used to create a
public record of the process. This will assist anyone
auditing the code provenance (now or in the future) to
easily perform due diligence without contacting the people
who performed the clean up. The clean up process should
therefore clearly document (using version control) the
evolution of the IP licensing.
</p>
<p>
Particular care needs to be taken with commit messages
during clean up. The intended audience needs to include
lawyers and code auditors. Members of the public need to be
able to follow and understand the process from these
messages alone.
</p>
<p>
It is therefore recommended that the initial source is
(after being expanded from the archive) checked in as is
into a special directory (
<code>${project}/trunk/import</code>
is suggested). The original packaging, copyright statements
and license notices should be preserved. A standard Apache
LICENSE and appropriate NOTICE should be added at the top
for the copyright for the collective work (see
<a href='http://www.apache.org/legal/src-headers.html'>
policy
</a>
). Take particular care with this commit message. As with
any patch that contains code which is not the original work
of the committer, the JIRA url (for the artifact imported)
needs to be included together with notes about the original
copyright owner and any associated paperwork. The fact that
this is a exact import including original headers should be
noted to stop any queries about these foreign headers.
</p>
<p>
The cleanup should then proceed in a number of commits. If
the source provenance is complex, break the process up into
a number of logical steps committing each in turn with a
good message.
</p>
<p>
In particular, take care when relocating copyright
statements and license notices into the NOTICE in the root
directory: consider moving each copyright owner individually
so that it is easier to audit. (See
<a
href='http://www.apache.org/legal/src-headers.html#notice'>
policy
</a>
.)
</p>
<p>
Once a section of code has been cleaned up
(and link:#repackaging[repackaged],
if necessary) normal development can begin.
</p>
</section>
</section>
<section id='repackaging'><title>On Repackaging</title>
<p>
It is recommended - but not mandated - that source is repackaged
under the Apache namespace. There is no need to use the incubator
namespace. For example, Java source might be repackaged to
<code>org.apache.foo.Bar</code> or a DTD to <code>http://dtd.apache.org/foo/bar</code>.
</p><p>
Existing open source projects moving to Apache may well need to consider
carefully how they will approach this transition.
</p>
</section>
<section id='documents-clean-up'><title>Update Documents</title>
<p>
Check the documentation for references to the old home of the project and update them
with references to Apache.
</p><p>
Read
link:http://incubator.apache.org/guides/branding.html[Branding Guide].
Ensure that appropriate disclaimers are added to the appropriate documentation.
Consider adding a <code>DISCLAIMER</code> text document.
</p>
<section id='build-clean-up'><title>Update Build</title>
<p>
If the project uses link:http://maven.apache.org[Apache Maven], the pom will
need to be updated to reflect that the project is now at Apache. In particular:
</p>
<ul>
<li>Update <code>mailingLists</code>
<li>Update <code>organization</code>
<li>Update <code>url</code>
<li>Update <code>issueManagement</code>
<li>Check <code>licenses</code>
<li>Update <code>scm</code>
<li>Update <code>groupId</code>
<li>Update <code>manifestEntries</code>. It is recommended that the
standard Apache settings are used
<li>Update <code>developers</code> to use apache IDs (when known)
<li>Update <code>distributionManagement</code>
<li>Consider specifying a link:http://maven.apache.org/pom.html#relocation[relocation]
</ul>
<p>
If the project uses link:http://ant.apache.org[Apache Ant], the build script
will probably need to be updated. In particular:
</p>
<ul>
<li>Ensure any MANIFESTs generated refer to Apache. It is recommended that the
standard Apache settings are used.
<li>Check that <code>LICENSE</code>, <code>NOTICE</code> and - if appropriate -
<code>DISCLAIMER</code> documents are copied into binary artifacts
</ul>
</section>
</section>
</section>
<section id='orientation'><title>Orientating New Committers: Understanding Apache</title>
<p>
When a committer is elected by a typical top level project, the nominator
and other PMC members educate the new committer about Apache. In the Incubator, this
inductive must be performed by the Mentors. This process is one of the most important
for the long term health of a project.
</p><p>
Apache works on the principle that discussions should happen on the most open forum
available. Unless the matter involves a sensitive matter (such as security or
personal issues), it should be raised on an open mailing list (typically the podling dev list
or the incubator general list). Use of the incubator private list should be reserved
for official notifications and sensitive topics.
</p><p>
Mentors need to take care. During the initial bootstrapping a habit may develop
of emailing private list. It is important to break this habit as soon as the mailing
lists are available.
</p><p>
Netiquette about the correct use of <code>cc</code>'s may also be difficult to
effectively impart. During the bootstrap process there are a number of occasions
where <code>cc</code>'s are required. The typical usage is to copy in a private
listing to indicate that the action has the lazy permission of the committee.
<code>cc</code>'s are very commonly used to create inefficient ad-hoc mailing lists in
the commercial world. Except for a small number of defined processes, <code>cc</code>'s
are frowned upon at Apache. Mentor need to encourage questions to be asked first
on the public lists of the project then raised (if necessary) to the general
incubator list.
</p><p>
TODO: content, links, prose, reconsider name for this section
</p>
</section>

<section id='issue-tracking-transition'><title>Issue Tracking Transition</title>
<p>
Issues for Apache projects should be tracked on Apache hardware. Some projects arrive
with existing issues tracking. So, in the end these need to be replaced (for new development
at least) by the Apache issues tracker. Options need to be discussed publically on list
and a consensus reached about the best transition strategy.
</p>
</section>
</section>